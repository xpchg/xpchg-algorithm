求a^bmod c.当b为大整数时。
等价于：A^x = A^(x % Phi(C) + Phi(C)) (mod C)

#include <iostream>
#include <math.h>
#include <stdio.h>
#include <string.h>

using namespace std;
__int64 a,b,c;
char s[1000007];

__int64 ealur (__int64 cc)
{
    __int64 ans = 1;
    for (__int64 i = 2; i*i <= cc; i++)
    {
        if (0 == cc % i)
        {
            ans *= i-1;
            cc /= i;
            while (0 == cc % i)
            {
                ans *= i;
                cc /= i;
            }
        }
    }
    if (cc > 1)
    ans *= cc-1;
    return ans;
}

bool str_cmp (char *p,__int64 n)
{
    int len = strlen (p);
    __int64 sum = 0;
    for (int i = 0; i < len; i++)
    {
        sum = sum * 10 + p[i]-'0';
        if (sum > n) return true;
    }
    return false;
}

__int64 b_mod_c (char *p,__int64 n)
{
    int len = strlen (p);
    __int64 sum = 0;
    for (int i = 0; i < len; i++)
    {
        sum = sum * 10 + p[i] - '0';
        while (sum >= n)
        sum -= n;
    }
    return sum;
}

__int64 get_b(char *p)
{
    int len = strlen (p);
    __int64 sum = 0;
    for (int i = 0; i < len; i++)
    sum = sum * 10 + p[i] - '0';
    return sum;
}

__int64 ab_mod_c (__int64 a,__int64 b,__int64 c)
{
    if (a == 0) return 0;
    if (b == 0) return 1;
    if (b == 1) return a % c;
    __int64 x = ab_mod_c (a,b/2,c);
    __int64 ans = x * x % c;
    if (b % 2 == 1) ans = ans  * a % c;
    return ans;
}

int main ()
{
    while (scanf ("%I64d%s%I64d",&a,s,&c) != EOF)
    {
        __int64 phi = ealur (c);
        if (str_cmp (s,phi))
        {
            b = b_mod_c(s,phi) + phi;
        }
        else b = get_b (s);
        printf ("%I64d\n",ab_mod_c(a,b,c));
    }
    return 0;
}