#include <iostream>
#include <cstring>
#include <cmath>
#include <cstdio>
#include <algorithm>
#define maxn 10000
using namespace std;
int isprime[1300];
int cnt;
int ff[maxn][1300];
int hash[maxn];
int p;

int isok (int x)
{
    for (int i = 0; i < cnt && isprime[i]*isprime[i] <= x; i++)
    {
        if (x % isprime[i] == 0) return 0;
    }
    return 1;
}

void getprime ()
{
    isprime[0] = 2;
    isprime[1] = 3;
    hash[2] = 0;
    hash[3] = 1;
    cnt = 2;
    for (int i = 5; i < maxn; i++)
    if (isok (i))
    {
        isprime[cnt++] = i;
        hash[i] = cnt-1;
    }
}

int gcd (int a,int b)
{
    if (b ==0 ) return a;
    return gcd (b,a%b);
}

void Extended_gcd (int a,int b,int &x,int &y)
{
    if (b == 0)
    {
        x = 1;
        y = 0;
    }
    else
    {
        Extended_gcd(b,a%b,y,x);
        y -= x*(a/b);
    }
}

int C (int a,int b)
{
    int x,y;
    if (b > a) return 0;

    if (b == 0 || a == 0|| a == b) return 1;
    b = (ff[a-b][hash[p]]*ff[b][hash[p]])%p;
    a = ff[a][hash[p]];
    int c = gcd (a,b);
    a /= c, b/=c;
    Extended_gcd (b,p,x,y);
    x = (x+p)%p;
    x = (x*a)%p;
    return x;
}

int Lucas (int n,int m)
{
    int ans = 1;
    int a,b;
    while (n && m)
    {
        a = n % p;
        b = m % p;
        n /= p;
        m /= p;
        ans = (ans*C(a,b))%p;
        if (ans == 0) return 0;
    }
    return ans;
}

void init ()
{
    for (int i = 0; i < cnt ; i++)
    {
        ff[0][i] = 1;
        for (int j = 1; j < isprime[i]; j++)
        ff[j][i] = (ff[j-1][i]*j)%isprime[i];
    }
}

int get (int a,int b)
{
    int ret = 0;
    while (a)
    {
        ret += (a/b);
        a/=b;
    }
    return ret;
}

int main ()
{
    int t = 1,ans;
    int k,n;
    getprime ();
    init ();
    while (scanf ("%d%d%d",&n,&k,&p) != EOF)
    {
        printf ("Case #%d: ",t++);
        if (k > n / 2) k = n - k;
        int t = get(n+1,p);
        t -= get(k,p);
        t -= get(n+1-k,p);
        if (t > 0)
        {
            ans = 0;
        }
        else
        {
            ans = Lucas(n+1,k)%p;
        }
        ans = (ans+n-k)%p;
        ans = (ans+p)%p;
        printf ("%d\n",ans);
    }
    return 0;
}
